#+TITLE: Module and Package
#+OPTIONS: num:nil author:nil  html-postamble:nil
* Part 1
** Modules
- Any Python source file is a module
#+BEGIN_SRC python
  # spam.py
  def grok(x):
      ...

  def blah(x):
      ...
#+END_SRC

- You use import to execute and access it
#+BEGIN_SRC python
a = spam.grok('hello')

from spam import grok
a = grok('hello')
#+END_SRC

** Namespaces 
- Each module is its own isolated world
#+BEGIN_SRC python
  # spam.py

  x = 42

  def blah():
      print(x)

  # eggs.py

  x = 37 

  def foo():
      print(x)
#+END_SRC
- These definitions of x are different
- What happens in Module, stays in a module

** Global Variables
- Global variables bind inside the same module
#+BEGIN_SRC python
  # spam.py

  x = 42

  def blah():
      print(X)
#+END_SRC
- Fuctions record their definition environment
#+BEGIN_SRC python
  >>> from spam import blah
  >>> blah.__module__
  'spam'
  >>> blah.__globals__
  { 'x': 42, ...}
  >>>
#+END_SRC

** Module Execution
- When a module is imported, =all of the
  statements in the module execute= one after
  another until the end of the file is reached
- The contents of the  module namespace are of the
  global names that are still defined at the end
  of the execution process
- If there are scripting statements that carry out
  tasks in the global scope (printing, creating
  files, etc.), yout will see them run on import

** =from module import=
- Lifts selected symbols out of a module *after
  importing it* and  makes them available locally
#+BEGIN_SRC python
  from math import sin, cos

  def rectangular(r, theta):
      x = r * cos(theta)
      y = r * sin(theta)
      return x, y
#+END_SRC
- Allows parts of module to be used without having
  to type the module prefix

** =from module import *=
- Takes *all symbols* from a module and places
  them into local scope
#+BEGIN_SRC python
  from math import *

  def rectangular(r, theta):
      y = x * cos(theta)
      y = r * sin(theta)
      return x, y

#+END_SRC
- Sometimes useful
- Usually considered bad style (try to avoid)

** Commentary
- Variations on import do not change the way that
  modules work
#+BEGIN_SRC python
  import math as m
  from math import cos, sin
  from math import *
  ...
#+END_SRC
- import always executes the *entire* file
- Modules are still isolated environments
- These variations are just manipulating names

** Module Names
- File names have to follow the rules
#+BEGIN_SRC python
  # good.py

  ...

  # 2bad.py

  ...
#+END_SRC
- Comment: This mistake comes up a lot when
  teaching Python to newcomers
- Must be a valid identifier name
- Also: avoid non-ASCII characters

** Naming Conventions
- It is standard practice for package and module
  names to be concise and lowercase 
- =foo.py=
- *not* =MyFooModule.py=
** Module Search Path
- If a file isn't on the path, it won't import
#+BEGIN_SRC python
   >>> import sys
   >>> sys.path ['',
         '/usr/local/lib/python34.zip',
         '/usr/local/lib/python3.4',
         '/usr/local/lib/python3.4/plat-darwin',
         '/usr/local/lib/python3.4/lib-dynload',
         '/usr/local/lib/python3.4/site-packages']
#+END_SRC
- Sometimes you might hack it...although doing so
  feels "dirty"
#+BEGIN_SRC python
import sys
      sys.path.append("/project/foo/myfiles")
#+END_SRC

** Module Cashe
- Modules only get loaded once
- There's a cache behind the scenes
#+BEGIN_SRC python
>>> import spam
>>> import sys
>>> 'spam' in sys.modules
True
>>> sys.modules['spam']
<module 'spam' from 'spam.py'>
#+END_SRC
- Consequence :: If you make a change to the source
 and repeat the import, nothing happens (often
 furstrating to newcomers)

** Module Reloading
- You can force-reload a module, but you're never
  supposed to do it
#+BEGIN_SRC python
>>> from importlib import reload
>>> reload(spam)
<module 'spam' from 'spam.py'>
#+END_SRC
- Apparently zombies are spawned if you do this
- No, seriously
- Don't do it

** =__main__= check
- If a file might run as a main program, do this
#+BEGIN_SRC python
  # spam.py

  ...
  if __name__ == '__main__':
      # Running as the main program
      ...
  
#+END_SRC
- Such code won't run on library import
#+BEGIN_SRC python
import spam    # Main code doesn't execute
#+END_SRC

#+BEGIN_SRC sh
zsh % python spam.py  # Main code executes
#+END_SRC

** Packages
- For larger collectons of code, it is usually
  desirable to organize modules into a hierarchy
#+BEGIN_EXAMPLE
|--spam/
   |-- foo.py
   |-- bar/
       |-- grok.py
   ...
#+END_EXAMPLE
- To do it, you just add __init__.py files
#+BEGIN_EXAMPLE
|--spam/
   |-- init.py
   |-- foo.py
   |-- bar/
       |-- grok.py
   ...
#+END_EXAMPLE

** Using a Package
- import works the same way, multiple levels
#+BEGIN_SRC python
import spam.foo
from spam.bar import grok
#+END_SRC
- The =__init__.py= file import at each level
- Apparently you can do things in those files
- We'll get to that

** Comments
- At a simple level, there's not much to =import=
- ...except for everything else













* Part 2
** Question
- Which is better?
  + One .py file with 20 classes and 1000 lines?
  + 20 .py files, each containing a single class?
- Most programmer prefer the latter
- Small source file are easier to maintain
** Question
- Which is better?
  + 20 files all defined at top level
#+BEGIN_EXAMPLE
    foo.py
    bar.py
    grok.py
#+END_EXAMPLE
  + 20 files group in a directory
#+BEGIN_EXAMPLE
    spam/
          foo.py
          bar.py
          grok.py
#+END_EXAMPLE
- Clearly, latter option is easier to manage
** Question
- which is better?
  + One module import 
#+BEGIN_SRC python
  from spam import Foo, Bar, Grok
#+END_SRC
  + Importing dozens of submodules
#+BEGIN_SRC python
      from spam.foo import Foo
      from spam.bar import Bar
      from spam.grok import Grok
#+END_SRC
- I prefer the former (althouth it depends)
- "Fits my brain"
** Modules vs. Packages
- Modluels are easy -- a single file
- Package are hard -- multiple related files
- Some Issues
  + Code organization
  + Connections between submodules
  + Desired usage
** Implicit Relative Imports
- Don't use implicit relative imports in packages
#+BEGIN_EXAMPLE
  spam.py/
           __init__.py
           foo.py
           bar.py

#+END_EXAMPLE
- Example:
#+BEGIN_SRC python
  # bar.py
  import foo  # Relative import of foo submodule
#+END_SRC
- It works in Python2, but not Python 3

** Absolute Imports
- Alternative: Use an absolute module import
#+BEGIN_EXAMPLE
spam/ 
   __init__.py
   foo.py
   bar.py
#+END_EXAMPLE
- Esample 
#+BEGIN_SRC python
from spam import foo
#+END_SRC
- Notice use of top-level package name
- I don't realy like it (verbose, fragile)

** COMMENT Explicit Relative Imports
- A better approach
#+BEGIN_EXAMPLE
spam/
    __init__.py
    foo.py
    bar.py
#+END_EXAMPLE
- Example
  #+BEGIN_SRC python
# bar.py
from . import foo  # Import from same level
  #+END_SRC
- Leading dots(.) used to move up hierarchy
#+BEGIN_SRC python
  from . import foo   # Loads ./foo.py
  from .. import foo  # Loads ../foo.py
  from ..grok import foo # Loads ../grok/foo.py
#+END_SRC

** Explicit Relative Imports
- Allow packages to be easily renamed
#+BEGIN_EXAMPLE
spam/
   __init__.py
   foo.py
   bar.py
#+END_EXAMPLE

#+BEGIN_EXAMPLE
grok/
    __init__.py
    foo.py
    bar.py
#+END_EXAMPLE
- Explicit relative imports still work unchaged
#+BEGIN_SRC python
  # bar.py
  from . import foo  # Imports from same level
#+END_SRC
- Useful for moving code around, versioning, etc.

** Commentary
- PEP-8 predates explicit relative imports
- I think its advice is sketchy on this topic
- Please Use explicit relative imports 
- They ARE used in the standard library

** __init__.py
- What are you supposed to do in those files?
- Claim: I think they should mainly be used to stich together multiple
  source files into "unified" top-level import (if desired)
- Example: Combining multiple Python files, building modules involving
  C extensions, etc.

** Module Assembly
-Consider two submodules in a package
#+BEGIN_EXAMPLE
spam/
   foo.py
   bar.py
#+END_EXAMPLE

#+BEGIN_SRC python
    # foo.py
    class Foo(object):
        ...
        ...
#+END_SRC

#+BEGIN_SRC python
  # bar.py

  class Bar(object):
      ...
      ...
#+END_SRC
- Suppose you want to combine them

** Module Assembly
- Combine in __init__.py
#+BEGIN_SRC python
  # __init__.py

  from .foo import Foo
  from .bar import Bar
#+END_SRC

** Module Assembly
- Users see a single unified top-level package
#+BEGIN_SRC python
import spam

f = spam.Foo()
b = spam.Bar()
...
#+END_SRC
- Split across files is an implementation detail

** Case Study
- The collections "module"
- It's actually a package with a few components


** Controlling Exports
- Each submodule should define __all__
#+BEGIN_SRC python
  # foo.py

  __all__ = [ 'Foo' ]

  class Foo(object):
      ...
#+END_SRC

#+BEGIN_SRC python
  # bar.py

  __all__ = [ 'Bar' ]

  class Bar(object):
      ...
#+END_SRC

- Controls behavior of =from module import *=
- Allows easy conbination in __init__.py
#+BEGIN_SRC python
  # __init__.py

  from .foo import *
  from .bar import *

  __all__ = (foo.__all__ + bar.__all__)
#+END_SRC

** Controlling Exports
- The last step is subtle
#+BEGIN_SRC python
  __all__ = (foo.__all__ + bar.__all__)
#+END_SRC
- Ensures proper propagation of exported symbols to the top level of
  the package
